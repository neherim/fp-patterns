#+REVEAL_EXTRA_CSS: ./css/local.css
#+REVEAL_EXTRA_CSS: ./css/ember.css
#+REVEAL_TRANS: fade
#+REVEAL_PLUGINS: (notes)
#+REVEAL_ROOT: ./reveal.js-3.8.0
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in
#+OPTIONS: toc:nil num:nil reveal_slide_number:nil author:nil date:nil timestamp:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+TITLE: Functional Programming Patterns

* Learn Haskell in 10 minutes
#+BEGIN_NOTES
Haskell чистый функциональный язык программирования общего назначения c ленивой моделью вычисления.
Ленивый - означает, что любые значения вычисляются только когда они нужны
Чистый - означает, что все функции в хаскеле чистые, то есть не производят никаких сторонних эфектов

Это кажется немного странным, как же без сторонних эффектов и изменения
состояния написать хоть сколько нибудь осмысленную программу?

Если проводить параллели с языком Java, то можно воспользоваться следующей интуицией:
Представим, что у нас все переменные стали final, а структуры иммутабельными.
Все операции связанные с вводом/выводом возвращают значения, обернутые в Future
(причем такие Future, которые не запускаются при создании).
То есть, например, мы обращаемся к БД и получаем не ResultSet, а
`Future<ResultSet>`. И так с любой IO операцией.
В дополнение к этому, мы не можем получить значение из этой Future, то есть у
этой Future нет метода `.get()`
Только сама jvm в `main` методе может получить значение из этой Future.
И единственное что нам остается, пытаться композировать все эти Future в одну
Future и возвращать ее в `main` методе, который уже ее запустит.

При таких ограничениях получается что наша программа - это одно большое
выражение, которое возвращает Future. А эта Future является композицией других Future.
Таким образом мы достигаем чистоты функций так, как никаких сайд эфектов при
вызове функций не происходит.

Ленивость языка проявляется в том, что все вычисления производятся только тогда,
когда их результат потребуется.
#+END_NOTES
** Lists
#+attr_reveal: :frag (roll-in)
#+begin_src haskell
"Hello" ++ ", World!" -- "Hello world!"
#+end_src

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
[1..5] == [1, 2, 3, 4, 5]
#+end_src

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
['A'..'F'] == "ABCDEF"
#+end_src

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
[1..]
#+end_src

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
[1..3] ++ [4..6] -- [1, 2, 3, 4, 5, 6]
#+end_src

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
[x*2 | x <- [1..5]] -- [2, 4, 6, 8, 10]
#+end_src

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
[(x, y) | x <- [1..3], y <- [1..3], x + y > 4] -- [(2,3), (3,2), (3,3)]
#+end_src

** Functions

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
add :: Integer -> Integer -> Integer
add a b = a + b
#+end_src

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
add 1 3 -- 4
#+end_src

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
addOne = add 1 -- :: Integer -> Integer

addOne 4 -- 5
#+end_src

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
main :: IO ()
main = putStrLn "Hello, World!"
#+end_src

** Controls
#+attr_reveal: :frag (roll-in)
#+begin_src haskell
factorial :: Integer -> Integer
factorial n = if n < 2
              then 1
              else n * factorial (n - 1)
#+end_src

#+attr_reveal: :frag (roll-in)
#+begin_src haskell
factorial :: Integer -> Integer
factorial 0 = 1
factorial n = n * factorial (n - 1)
#+end_src

** Data
Products
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
data Person = Person Name String Int
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
data Person = Person {
  name :: Name,
  address :: String,
  age :: Int
  }
#+END_SRC
#+attr_reveal: :frag (roll-in)
Sum
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
data Bool = False | True
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
data Maybe a = Nothing | Just a
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
data Error err a = Error err | Result a
#+END_SRC
#+REVEAL: split
Algebraic Data Types
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
data DeliveryStatus = Packing | Shipping Int | Delivered
#+END_SRC
* Patterns
#+REVEAL: split
#+BEGIN_NOTES
Функциональное программирование часто критикуют за использование математического
жаргона. Термины вроде зигохистоморфный препроморфизм конечно не помогают
продавать ФП. Названия же паттернов ООП более привычны для нас "Мост", "Фасад",
"Адаптер", но в тоже время эти знакомые названия не очень то помогают в
понимании реализации паттернов.

В ФП паттерны имеют под собой математическую основу со своими законами, в ООП же
многие паттерны можно реализовать множеством разных способов и это не будет
ошибкой. Сами паттерны в ФП были позаимствованы из раздела математики, которая
называется теория категорий.
#+END_NOTES

#+BEGIN_LEFTCOL
 * Semigroup
 * Monoid
 * Functor
 * Monad
 * Catamorphism
#+END_LEFTCOL

#+BEGIN_RIGHTCOL
#+attr_reveal: :frag (roll-in)
 * Appendable
 * Aggregatable
 * Mappable
 * Chainable
 * Collapsable
#+END_RIGHTCOL
* Category theory
#+BEGIN_NOTES
Теория категорий — раздел математики, изучающий свойства отношений между
математическими объектами, не зависящие от внутренней структуры объектов. В
отличие от теории множеств теория категорий больше сфокусирована на отношениях и
свойствах объектов, игнорируя их внутреннюю структуру.
#+END_NOTES
** Category
#+BEGIN_NOTES
Категория - это набор объектов и стрелок (морфизмов) между ними. В общем случае
про сущность самих объектов ничего не известно. Теория категорий работает не с
объектами, а с морфизмами, точнее — с их композицией. Стрелки компонуются так,
что если у вас есть стрелка от объекта А к объекту B, и еще одна стрелка из
объекта B в C, то должна быть стрелка, — их композиция, — от А до С. А так же
должна существовать стрелка из объекта в сам же объект.
#+END_NOTES

#+attr_html: :width 400px; :style border:0px; box-shadow: 0 0 0px rgba(0, 0, 0, 0)
[[./img/category.png]]

** Examples of categories
#+BEGIN_NOTES
Приведем примеры категорий:

Set — категория множеств. Объектами в этой категории являются множества,
морфизмами — отображения множеств.

Grp — категория групп. Объектами являются группы, морфизмами — отображения,
сохраняющие групповую структуру (гомоморфизмы групп).

VectK — категория векторных пространств над полем K. Морфизмы — линейные
отображения.
#+END_NOTES
| name  | objects                    | morphism               |
|-------+----------------------------+------------------------|
| Set   | sets                       | functions              |
| Grp   | groups                     | group homomorfisms     |
| VectK | vector spaces over field K | linear transformations |

** Hask category
#+BEGIN_NOTES
Композиция лежит в основе теории категорий, так же она лежит в основе
программирования. В процедурном программировании композируем вызовы процедур, в
ООП комбинируем объекты, в функциональном - функции.

Хотя теория категорий и является источником паттернов ФП, но знать ее совершенно
не обязательно для их понимания и практического применения.
#+END_NOTES
#+attr_html: :width 400px; :style border:0px; box-shadow: 0 0 0px rgba(0, 0, 0, 0)
[[./img/hask-category.png]]
* Monoid
#+REVEAL: split
#+BEGIN_NOTES
Паттерн проектирования можно определить как часто встречающееся решение
определенной проблемы при проектировании архитектуры программ. Давайте
рассмотрим код, в котором мы запускаем приложение с конфигурациями полученными из
разных источников, и попробуем выделить в нем паттерн.

Для начала определим первый источник конфигурации - аргументы запуска приложения:
#+END_NOTES
One configuration source
#+BEGIN_SRC java
Config configFromArgs = fromArgs(args);
startApplication(configFromArgs);
#+END_SRC
#+REVEAL: split
#+BEGIN_NOTES
Теперь добавим возможность конфигурировать приложение через файл. Что теперь мы
передадим в функцию startApplicaton? Если мы не хотим менять сигнатуру функции
startApplication, то решением может стать некая функция combine, которая
соединяет два конфига из разных источников в один объект.
#+END_NOTES
Two configuration sources
#+BEGIN_SRC java
Config configFromArgs = fromArgs(args);
Config configFromFile = fromFile("config.yml");
Config config = combine(configFromFile, configFromArgs);
startApplication(config);
#+END_SRC
#+REVEAL: split
#+BEGIN_NOTES
Если источников конфигурации станет больше двух, то мы с легкостью можем написать
функцию, которая применяя функцию combine сворачивает список конфигов из разных
источников.

Нам даже не важно в каком порядке будут объединяться конфиги, пока сохраняется
общая последовательность их объединения. Мы можем сначала объединить
configFromSystemEnv и configFromArgs, потом configFromServer и configFromFile, и
затем объединить результаты предыдущих объединений. В математике такое свойство
операции называется ассоциативностью.

Чтобы функция combineAll была определена на пустом списке нам необходим объект,
который представлял из себя пустой конфиг, иначе функция combineAll будет
вынуждена возвращать результат типа Optional<Config>, что будет уже не так
удобно.
#+END_NOTES
Multiple configuration sources
#+BEGIN_SRC java
Config config = combineAll(List.of(configFromServer,
                                   configFromFile,
                                   configFromSystemEnv,
                                   configFromArgs));
startApplication(config);
#+END_SRC

#+REVEAL: split
#+BEGIN_NOTES
Конфиг в примере выше можно заменить на получение и композицию метрик с разных
серверов или соединение логов с нескольких сервисов. Объединяет их функция
композиции, со следующей сигнатурой и наличие нейтрального элемента, композиция
с которым ничего не меняет.
#+END_NOTES
#+BEGIN_SRC java
public <T> T apply(T a, T b);
#+END_SRC
** Overview
#+REVEAL: split
#+BEGIN_NOTES
В общей алгебре множество с заданной на нем ассоциативной бинарной операцией и
нейтральным элементом называется моноидом. Математики это определение записывают
следующим образом:
#+END_NOTES

\begin{multline}
\shoveleft (G, \cdot  : G \times  G \rightarrow  G) \\
\shoveleft (x \cdot y) \cdot z = x \cdot (y \cdot z) \\
\shoveleft e \cdot x = x \cdot e = x \\
\end{multline}

#+REVEAL: split
#+BEGIN_NOTES
С точки зрения теории категорий моноид это просто категория состоящая из одного
объекта. Выразим это в виде Java интерфейса, расширив интерфейс полугруппы, так
как по определению любой моноид также является и полугруппой:
#+END_NOTES
Java
#+BEGIN_SRC java
public interface Monoid<A> {
    A apply(A a, A b);
    A empty();
}
#+END_SRC
#+attr_reveal: :frag (roll-in)
Haskell
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
class Monoid a where
  (<>)    :: a -> a -> a
  mempty  :: a
#+END_SRC

** Examples
#+BEGIN_NOTES
Приведем примеры моноидов:
#+END_NOTES
*** String monoid
Java
#+BEGIN_SRC java
class StringMonoid implements Monoid<String> {
    public String empty() { return ""; }
    public String apply(String a, String b) {
        return a + b;
    }
}
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
StringMonoid m = new StringMonoid();
m.apply("Hello", m.apply(" ", "World"));
#+END_SRC

#+REVEAL: split
Haskell
#+BEGIN_SRC haskell
instance Monoid String where
  (<>)   = (++)
  mempty = ""
#+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
"Hello" <> " " <> "World"
#+END_SRC
*** Numeric monoids
Java
#+BEGIN_SRC java
class IntSumMonoid implements Monoid<Integer> {
    public Integer empty() { return 0; }
    public Integer apply(Integer a, Integer b) {
        return a + b;
    }
}
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
IntSumMonoid m = new IntSumMonoid();
m.apply(10, m.apply(2, 3));
#+END_SRC
#+REVEAL: split
Haskell
#+BEGIN_SRC haskell
instance Num a => Monoid (Sum a) where
  Sum a <> Sum b = Sum (a + b)
  mempty = Sum 0
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
Sum 10 <> Sum 2 <> Sum 3
#+END_SRC

#+REVEAL: split
Java
#+BEGIN_SRC java
class IntProdMonoid implements Monoid<Integer> {
    public Integer empty() { return 1; }
    public Integer apply(Integer a, Integer b) {
        return a * b;
    }
}
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
IntProdMonoid m = new IntProdMonoid();
m.apply(10, m.apply(2, 3));
#+END_SRC
#+REVEAL: split
Haskell
#+BEGIN_SRC haskell
instance Num a => Monoid (Product a) where
  Product a <> Product b = Product (a * b)
  mempty = Product 1
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
Product 10 <> Product 2 <> Product 3
#+END_SRC
** Reduce
#+BEGIN_NOTES
Достаточно легко реализовать функцию свертки для моноидов:
#+END_NOTES
Java
#+BEGIN_SRC java
public static <T> T mconcat(Monoid<T> monoid, List<T> list)
#+END_SRC

#+attr_reveal: :frag (roll-in)
Haskell
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
mconcat :: Monoid a => [a] -> a
#+END_SRC

** Reduce
#+BEGIN_NOTES
Благодаря ассоциативности мы можем распараллелить операцию свертки, так как не
важен порядок объединения элементов, пока сохраняется общий порядок.

Поскольку бинарная операция принимает два значения одного типа и в качестве
результата возвращает значение того же типа, то это позволяет нам легко строить
композицию моноидов.
Мы можем из двух моноидов получить один составной, потом добавить к нему третий
и так далее. И в результате мы все равно получим тот же самый моноид, готовый к
дальнейшей композиции.

Моноид как паттерн позволяет нам собрать что-то сложное из простых частей не
вводя дополнительных концепций. А ассоциативность этой операции позволяет нам
разделить применение этой операции по разным потокам или даже разным сервисам.

#+END_NOTES
#+attr_html: :width 400px; :style border:0px; box-shadow: 0 0 0px rgba(0, 0, 0, 0)
[[./img/monoid-1.png]]
* Functor
#+REVEAL: split
#+BEGIN_NOTES
Давайте поразмышляем над следующими тремя примерами кода.
У них гораздо больше общего чем может показаться на первый взгляд. Все эти
примеры можно переписать с использованием паттерна Функтор.
#+END_NOTES

#+BEGIN_SRC java
Customer customer = findCustomerByName(name);
String city = null;
if (customer != null) {
    city = customer.getAddress().getCity();
}
#+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
List<Customer> customers = findAllCustomers();
List<String> cities = new ArrayList<String>();
for (Customer customer : customers) {
    String city = customer.getAddress().getCity();
    cities.add(city);
}
#+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
Future<Customer> customer = findCustomerByName(name);
String city = customer.get().getAddress().getCity();
#+END_SRC

** Overview
#+BEGIN_NOTES
По определению из математики функтор — особый тип отображений между категориями.
Его можно понимать как отображение, сохраняющее структуру.

В Java функтором называют структуру данных, которая инкапсулирует некоторое
значение и имеет метод map со следующей сигнатурой для трансформации этого
значения.

Пример на Haskell можно прочитать следующим образом:
Тип f принадлежит к классу типов функтор, если для него определена функция fmap,
у которой первый параметр - это функция, принимающая значения типа a и
возвращающая значение типа b, второй параметр - это f параметризованный типом a
и результат - f, параметризованный типом b.

Тип f b - это тип высшего порядка. В Java, это было бы что-то
вроде: F<B>, то есть любой контейнер, который содержит тип B. Таким образом мы
бы получили возможность абстрагироваться не только от типа внутри контейнеров,
но и от типов самих контейнеров. Но к сожалению в Java так сделать нельзя (но
можно сделать в Scala)
#+END_NOTES
Java
#+BEGIN_SRC java
interface Functor<A> {
    <B> Functor<B> map(Function<A, B> fn);
}
#+END_SRC

#+attr_reveal: :frag (roll-in)
Haskell
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
class Functor f where
  fmap :: (a -> b) -> f a -> f b
#+END_SRC

** Laws
#+BEGIN_NOTES
Но этого недостаточно, чтобы определить функтор. Как и в случае с моноидом
функтор должен удовлетворять некоторым законам, которые мы не можем выразить в
языках вроде Java или Haskell. Вот эти законы:
#+END_NOTES

\begin{multline}
\shoveleft f : X \rightarrow Y \in C, g : Y \rightarrow Z \in C \\
\shoveleft F(\text{id}_x)=\text{id}_{F(x)} \\
\shoveleft F(g \circ f) = F(g) \circ F(f) \\
\end{multline}

#+REVEAL: split
#+BEGIN_NOTES
Запишем их в виде кода.
1. Вызов функции map с функцией identity должен вернуть тот же самый функтор.
2. Закон композиции.
Смысл этих законов сводится к тому, что функция map должна взять содержимое
контейнера, и применить к нему функцию, которую мы передали, при этом не меняя
структуры контейнера.
#+END_NOTES
Identity Law
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
functor.map(x -> x) == functor
#+END_SRC

#+attr_reveal: :frag (roll-in)
Composition Law
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
functor.map(x -> f(g(x))) == functor.map(g).map(f)
#+END_SRC
** Examles
#+BEGIN_NOTES
Рассмотрим самые распространенные примеры функторов.
#+END_NOTES

*** Optional
#+BEGIN_NOTES
Optional это тип данных, который может либо содержать значение, либо нет.
Реализация функции map в этом случае довольно проста. В случае если Optional не
содержит значения - возвращаем пустой Optional. Если значение присутствует -
применяем к нему переданную функцию и возвращаем новый экземпляр Optional с
трансформированным значением.
#+END_NOTES

#+BEGIN_SRC java
class Optional<T> implements Functor<T> {
    private final T value;

    private Optional(T value) {
        this.value = value;
    }

    @Override
    public <R> Optional<R> map(Function<T, R> f) {
        if (value == null)
            return empty();
        else
            return of(f.apply(value));
    }

    public static <T> Optional<T> of(T a) {
        return new Optional<T>(a);
    }

    public static <T> Optional<T> empty() {
        return new Optional<T>(null);
    }
}
#+END_SRC

#+REVEAL: split
#+BEGIN_SRC java
Optional<Customer> customer = findCustomerByName(name);
Optional<String> city = customer
    .map(Customer::getAddress)
    .map(Address::getCity);
#+END_SRC

#+REVEAL: split
Haskell
#+BEGIN_SRC haskell
Maybe a = Nothing | Just a
#+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
instance Functor Maybe where
    fmap _ Nothing   = Nothing
    fmap f (Just a)  = Just (f a)
#+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
fmap length (Just "Hello!")
#+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
length <$> Just "Hello!"
#+END_SRC

*** List
#+BEGIN_NOTES
Функтор не обязан содержать только одно значение, например список также является
функтором. Сигнатура функции map остается прежней, но ее поведение меняется. В
случае списка map применяет функцию трансформации к каждому элементу, возвращая
новый список.
#+END_NOTES
#+BEGIN_SRC java
class FList<T> extends ArrayList<T> implements Functor<T> {

    @Override
    public <R> FList<R> map(Function<T, R> f) {
        FList<R> result = new FList<>();
        for (int i = 0; i < size(); i++) {
            R newElement = f.apply(get(i));
            result.add(newElement);
        }
        return result;
    }
}
 #+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
FList<Customer> customers = getAllCustomers();
FList<String> cities = customers
    .map(Customer::getAddress)
    .map(Address::getCity);
#+END_SRC

#+REVEAL: split
Haskell
#+BEGIN_SRC haskell
instance Functor [] where
  fmap = map
#+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
fmap (* 2) [1, 2, 3, 4]
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
(* 2) <$> [1, 2, 3, 4]
#+END_SRC

*** Promise
#+BEGIN_NOTES
Определение функтора не накладывает никаких ограничений ни на структуру
контейнера, ни на то как значение в него попадает или как его достать от туда. Функтор
вообще может не содержать никакого значения в данный момент, а получать его
позже. Например, функтор можно имплементировать для класса Future<T>. При
создании объекта Future<T> в нем нет никакого значения, оно там появится когда
завершиться какое-то действие. Выполнится http запрос к внешнему
сервису или чтение из БД. Но это не мешает нам применять
трансформации к этому еще не полученному
значению через функцию map, так же как мы делали это с List и Optional. При этом
функция map не блокирует поток, ожидая появления значения. Таким образом мы можем
строить цепочки неблокирующих вычислений.

По приведенным выше примерам функторов можно заметить на сколько это мощная
абстракция. Мы использовали один и тот же интерфейс для реализации цепочки отложенных
вычислений, трансформации всех элементов списка и работы с неопределенным значением.
#+END_NOTES
#+BEGIN_SRC java
class Promise<T> implements Functor<T> {
    public <R> Promise<R> map(Function<T, R> f) { ... }
}
#+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
Promise<Customer> customer = customerServiceApi.getCustomerById(id);
Promise<String> city = customer
    .map(Customer::getAddress)
    .map(Address::getCity);
#+END_SRC

* Monad
#+REVEAL: split
#+BEGIN_NOTES
Функтор удобный и часто используемый паттерн, но в некоторых ситуациях он нам не
подходит. Например, когда функция трансформации сама возвращает функтор вместо
обычного значения.

Если мы воспользуемся функцией map, то в результате получим тип
Optional<Optional<Manager>> с которым потом не понятно что делать.
#+END_NOTES

#+BEGIN_SRC java
public Optional<Manager> findLocalManager(String city) { ... }
public Optional<Customer> findCustomerByName(String name) { ... }
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
public Optional<Manager> findLocalManager(String city) { ... }

//...
Optional<Customer> customer = findCustomerByName(name);
Optional<Optional<Manager>> manager = customer
    .map(Customer::getAddress)
    .map(Address::getCity)
    .map(city -> findLocalManager(city));
#+END_SRC

#+REVEAL: split
#+BEGIN_NOTES
Функция map из определения функтора имеет следующую сигнатуру:
#+END_NOTES
map
#+BEGIN_SRC java
public <B> Functor<B> map(Function<A, B> fn);
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
fmap :: (a -> b) -> f a -> f b
#+END_SRC

#+BEGIN_NOTES
Нам же нужна функция со следующей сигнатурой и ее мы найдем в классе типов
монада
#+END_NOTES

#+attr_reveal: :frag (roll-in)
flatMap
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
public <B> Functor<B> flatMap(Function<A, Functor<B>> fn);
#+END_SRC
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
flatMap :: (a -> f b) -> f a -> f b
#+END_SRC
** Overview
#+BEGIN_NOTES
Монада — это общий способ описать идею последовательных вычислений, которые
можно соединять вместе так, чтобы от результата предыдущего вычисления зависело
следующее.

С точки зрения программирования монада это тип данных с одним параметром,
обладающим двумя функциями: Функцией конструктором (unit/pure/return), которая
оборачивает некоторое значение в монаду. И функцией связывания (flatMap/bind).
Как и рассмотренные ранее паттерны монада должна удовлетворять некоторым
законам, знакомство с которыми мы оставим за рамками этой презентации.

Функцию unit нельзя выразить в Java интерфейсе, будем считать что ее роль будет
выполнять конструктор класс.
Интерфейс Monad может выглядеть на Java следующим образом:
#+END_NOTES

Java
#+BEGIN_SRC java
public interface Monad<T, M extends Monad<?, ?>> extends Functor<T> {
    M flatMap(Function<T, M> f);
}
#+END_SRC

#+BEGIN_NOTES
#+END_NOTES
#+attr_reveal: :frag (roll-in)
Haskell
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC haskell
class Functor m => Monad m where
    (>>=)   :: m a -> (a -> m b) -> m b
    return  :: a -> m a
#+END_SRC
** Examples
*** Optional
#+BEGIN_NOTES
Попробуем написать имплементацию этого интерфейса для Optional.
#+END_NOTES

#+BEGIN_LARGE_SRC
#+BEGIN_SRC java
class Optional<T> implements Monad<T, Optional<T>> {
    private final T value;

    private Optional(T value) {
        this.value = value;
    }

    public static <T> Optional<T> of(T a) {
        return new Optional<>(a);
    }

    public static <T> Optional<T> empty() {
        return new Optional<>(null);
    }

    @Override
    public <B> Optional<B> map(Function<T, B> fn) {
        if (value == null)
            return empty();
        else
            return of(fn.apply(value));
    }

    @Override
    public Optional<T> flatMap(Function<T, Optional<T>> fn) {
        if (value == null)
            return empty();
        else
            return fn.apply(value);
    }
}
#+END_SRC
#+END_LARGE_SRC

#+REVEAL: split
#+BEGIN_NOTES
Вернемся к нашему примеру, где мы хотели найти менеджера для клиента. Теперь он
будет выглядеть так:
#+END_NOTES
#+BEGIN_SRC java
public Optional<Manager> findLocalManager(String city) { ... }

//...
Optional<Customer> customer = findCustomerByName(name);
Optional<Manager> manager = customer
    .map(Customer::getAddress)
    .map(Address::getCity)
    .flatMap(this::findLocalManager);
#+END_SRC

#+REVEAL: split
#+BEGIN_SRC java
class Person {
    private PersonalData personalData;
}

class PersonalData {
    private Contact contact;
}

class Contact {
    private Address address;
}

class Address {
    private String city;
}
#+END_SRC

#+BEGIN_NOTES
Во первых понять по этой структуре какие поля обязательные, а какие нет -
невозможно, так что будем считать что null может быть в любом поле и теперь
хотим у человека получить город проживания. Для этого нам придется написать
что-то вроде:

Выглядит этот код хоть и привычно, но во-первых в нем можно допустить ошибку,
во-вторых он наполнен визуальным мусором, который мешает понимать его суть.
Давайте перепишем этот пример с использованием Optional:
#+END_NOTES

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
String city = null;
if (person.getPersonalData() != null
    && person.getPersonalData().getContact() != null
    && person.getPersonalData().getContact().getAddress() != null) {
    city = person.getPersonalData().getContact().getAddress().getCity();
}
#+END_SRC

#+REVEAL: split
#+BEGIN_SRC java
class Person {
    private Optional<PersonalData> personalData;
}

class PersonalData {
    private Optional<Contact> contact;
}

class Contact {
    private Optional<Address> address;
}

class Address {
    private String city;
}
#+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
Optional<String> city = person.getPersonalData()
    .flatMap(PersonalData::getContact)
    .flatMap(Contact::getAddress)
    .map(Address::getCity);
#+END_SRC
#+BEGIN_NOTES
На мой взгляд теперь из кода явно видно что мы хотим сделать, компилятор
защищает нас от ошибок а типы стали частью документации к коду.
#+END_NOTES

*** Promise
#+BEGIN_NOTES
Давайте посмотрим на функции ниже и подумаем как нам сделать следующее: получить
клиента по имени, потом по его адресу найти менеджера и запланировать между ними
встречу. И сделать все это асинхронно, без блокировок.

На самом деле для этого нам не нужно ничего знать кроме того что Promise также
является монадой. Сделать то что мы хотим можно следующим образом:

Таким образом мы можем строить цепочки связанных асинхронных вызовов не
используя коллбеки или какие-то дополнительные инструменты синхронизации.
#+END_NOTES
#+BEGIN_SRC java
public Promise<Customer> getCustomerByName(String name) { ... }
public Promise<Manager> getLocalManager(Address address) { ... }
public Promise<Meeting> scheduleMeeting(Manager m, Customer c) { ... }
#+END_SRC

#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC java
Promise<Meeting> meeting = getCustomerByName(name)
    .flatMap(customer ->
             getLocalManager(customer.getAddress())
                 .flatMap(manager ->
                          scheduleMeeting(manager, customer)));
#+END_SRC

*** For comprehension
#+BEGIN_NOTES
В Haskell и Scala монады настолько распространены, что существует специальный
синтаксис для композиции монадических функций. Благодаря ему можно переписать
этот код:
#+END_NOTES
#+REVEAL: split
Scala:
#+BEGIN_SRC scala
val meeting = getCustomerByName(name)
  .flatMap(customer =>
      getLocalManager(customer.address)
        .flatMap(manager =>
          scheduleMeeting(manager, customer))
  )
#+END_SRC

#+BEGIN_NOTES
Вот так:
#+END_NOTES
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC scala
val meeting = for {
  customer <- getCustomerByName(name)
  manager <- getLocalManager(customer.address)
  meeting <- scheduleMeeting(manager, customer)
} yield meeting
#+END_SRC

#+BEGIN_NOTES
В Scala такая форма записи называется for-comprehension
#+END_NOTES

*** Either
#+BEGIN_NOTES
Either - еще одна распространенная монада. Она реализует семантику вычислений
которые могут завершиться успехом или же неудачей. Either представляет из себя
двухпараметрический тип, где первый параметр типа (Left) означает ошибку, а
правый параметр (Right) - успех. Существует несколько способов реализовать этот
класс на Java, приведем самый примитивный:
#+END_NOTES
#+BEGIN_LARGE_SRC
#+BEGIN_SRC java
public class Either<L, R> implements Monad<R, Either<L, R>> {
    private final L leftVal;
    private final R rightVal;

    private Either(L left, R right) {
        this.leftVal = left;
        this.rightVal = right;
    }

    public static <L, R> Either<L, R> left(L left) {
        return new Either<>(left, null);
    }

    public static <L, R> Either<L, R> right(R right) {
        return new Either<>(null, right);
    }

    @Override
    public Either<L, R> flatMap(Function<R, Either<L, R>> f) {
        if (leftVal != null)
            return left(leftVal);
        else
            return f.apply(rightVal);
    }

    @Override
    public <B> Either<L, B> map(Function<R, B> f) {
        if (leftVal != null)
            return left(leftVal);
        else
            return right(f.apply(rightVal));
    }
}
#+END_SRC
#+END_LARGE_SRC

#+REVEAL: split
#+BEGIN_NOTES
И снова, как мы видим, поменяв тип с Promise на Either, основной алгоритм не
поменялся, изменился только контекст вычислений. Раньше у нас были вычисления в
асинхронном контексте, а теперь вычисления с возможной неудачей. Цепочка
вычислений будет продолжаться пока какая-нибудь из функций не вернет Left
значение, вместо Right или пока не завершится успешно вся цепочка. На уровне
типов можно сделать так что будет невозможно воспользоваться значением из Either
если сначала не проверить, что он содержит, ошибку или результат. Таким образом
мы добиваемся поведения аналогичного проверяемым исключениям Java. Но, в отличие
от них, тип Either удобнее композировать.
#+END_NOTES
Java
#+BEGIN_SRC java
public Either<Err, Customer> getCustomerByName(String name) { ... }
public Either<Err, Manager> getLocalManager(Address address) { ... }
public Either<Err, Meeting> scheduleMeeting(Manager m, Customer c) { ... }

Either<Err, Meeting> meeting = getCustomerByName(name)
    .flatMap(customer ->
             getLocalManager(customer.getAddress())
             .flatMap(manager ->
                      scheduleMeeting(manager, customer)));
#+END_SRC
#+attr_reveal: :frag (roll-in)
Scala
#+attr_reveal: :frag (roll-in)
#+BEGIN_SRC scala
val meeting = for {
  customer <- getCustomerByName(name)
  manager <- getLocalManager(customer.address)
  meeting <- scheduleMeeting(manager, customer)
} yield meeting
#+END_SRC
* Thank you!
#+REVEAL: split
#+BEGIN_QUOTE
Simplicity and elegance are unpopular because they require hard work and
discipline to achieve and education to be appreciated.

And to make matters worse: complexity sells better.

--- Edsger Dijkstra
#+END_QUOTE

#+BEGIN_NOTES
Абстракции крайне важны. В принципе все чем мы занимаемся в программировании -
это проектирование абстракций и взаимодействий между ними. К признакам хороших
абстракций можно отнести возможность комбинировать их друг с другом и
универсальность, то есть количество разных вещей, которые можно выразить через
абстракцию.

У математиков очень большой опыт в построении и использовании абстракций. И
поскольку язык Хаскелл был разработан математиками, то нет ничего удивительного
что в нем используются знакомые математикам и проверенные временем абстракции. И
дальше они уже потихоньку протекают в мейнстрим языки программирования.
#+END_NOTES
